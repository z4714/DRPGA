{
    "AgentFunctions": {
        "agent_reward": "def agent_reward(self, agent, world): shaped_reward, shaped_adv_reward = True, True; adversary_agents, good_agents = self.adversaries(world), self.good_agents(world); adv_rew = sum(np.sqrt(np.sum(np.square(a.state.p_pos - a.goal_a.state.p_pos))) for a in adversary_agents) if shaped_adv_reward else sum(-5 if np.sqrt(np.sum(np.square(a.state.p_pos - a.goal_a.state.p_pos))) < 2 * a.goal_a.size else 0 for a in adversary_agents); pos_rew = -min(np.sqrt(np.sum(np.square(a.state.p_pos - a.goal_a.state.p_pos))) for a in good_agents) if shaped_reward else (5 if min(np.sqrt(np.sum(np.square(a.state.p_pos - a.goal_a.state.p_pos))) for a in good_agents) < 2 * agent.goal_a.size else 0) - min(np.sqrt(np.sum(np.square(a.state.p_pos - a.goal_a.state.p_pos))) for a in good_agents); return pos_rew + adv_rew",
        "adversary_reward": "def adversary_reward(self, agent, world): shaped_reward = True; return -np.sqrt(np.sum(np.square(agent.state.p_pos - agent.goal_a.state.p_pos))) if shaped_reward else (5 if np.sqrt(np.sum(np.square(agent.state.p_pos - agent.goal_a.state.p_pos))) < 2 * agent.goal_a.size else 0)",
        "observation": "def observation(self, agent, world): entity_pos = [entity.state.p_pos - agent.state.p_pos for entity in world.landmarks]; entity_color = [entity.color for entity in world.landmarks]; other_pos = [other.state.p_pos - agent.state.p_pos for other in world.agents if other is not agent]; return np.concatenate([agent.goal_a.state.p_pos - agent.state.p_pos] + entity_pos + other_pos) if not agent.adversary else np.concatenate(entity_pos + other_pos)"
      
    },
    "ObservationSpaces": {
      "Agent": "[self_pos, self_vel, goal_rel_position, landmark_rel_position, other_agent_rel_positions]",
      "Adversary": "[landmark_rel_position, other_agents_rel_positions]"
    },
    "ActionSpaces": {
      "Agent": "[no_action, move_left, move_right, move_down, move_up]",
      "Adversary": "[no_action, move_left, move_right, move_down, move_up]"
    },
    "Agents":["adversary_0", "agent_0","agent_1"],
    "Description": ""
  }
  